{
  "name": "promise-circuitbreaker",
  "version": "1.0.2",
  "description": "A circuit breaker implementation",
  "main": "./lib/circuitbreaker.js",
  "directories": {
    "doc": "doc",
    "example": "example",
    "test": "test"
  },
  "dependencies": {
    "bluebird": "~1.1.1",
    "lodash": "~2.4.1",
    "fast-stats": "~0.0.2",
    "request": "~2.34.0"
  },
  "devDependencies": {
    "chai": "~1.9.1",
    "express": "~3.5.1",
    "node-inspector": "~0.7.2",
    "sinon": "<=1.9.0",
    "socket.io": "~0.9.16",
    "yadda": "~0.10.7",
    "mocha": "~1.18.2",
    "debug": "~0.8.0",
    "socket.io-client": "^0.9.16",
    "jshint": "~2.5.0",
    "jsdoc": "~3.3.0-alpha5",
    "ink-docstrap": "git+https://github.com/terryweiss/docstrap.git#2c1e385f8455c4eeb51df96c0065f430c5b64e2b",
    "minimist": "0.0.8",
    "mysql": "~2.1.1",
    "markdown": "~0.5.0"
  },
  "scripts": {
    "test": "make test"
  },
  "keywords": [
    "promise,circuit,breaker"
  ],
  "author": {
    "name": "Pablo de León Belloc"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/pablolb/promise-circuitbreaker.git"
  },
  "bugs": {
    "url": "https://github.com/pablolb/promise-circuitbreaker/issues"
  },
  "homepage": "https://github.com/pablolb/promise-circuitbreaker",
  "readme": "#Install\nYou can install locally with `npm install promise-circuitbreaker`.\n\n#Introduction\nA circuit breaker implementation for node with three main features:\n\n* It wraps \"node functions\" and uses [bluebird](https://www.npmjs.org/package/bluebird)\nPromise library to \"promisify\" the response.\n* It uses a rolling window to calculate the circuit's health.\n* It can use different error thresholds for different error types.\n\nFor more information about the Circuit Breaker pattern you can read \nMartin Fowler's [CircuitBreaker](http://martinfowler.com/bliki/CircuitBreaker.html).\n\nThe rolling window is based on Netflix's [Hystrix](https://github.com/Netflix/Hystrix/),\nas is the half-open state in which a test request will be made to close the circuit on success.\n\nThe package provides two main classes, the CircuitBreaker, and the RequestCircuitBreaker\nwhich wraps the [request](https://www.npmjs.org/package/request) module.\n\n#Quick Start\n\n```javascript\nvar mysql = require('mysql'),\n    CircuitBreaker = require('promise-circuitbreaker'),\n    TimeoutError = CircuitBreaker.TimeoutError,\n    OpenCircuitError = CircuitBreaker.OpenCircuitError;\n\nvar pool = mysql.createPool({\n    host: 'localhost',\n    database: 'test'\n});\n\nvar cb = new CircuitBreaker(pool.query, pool, {\n    timeout: 1000,\n    errorThreshold: 0.1\n});\n\ncb.exec('SELECT sleep(0.1)').spread(function(rows, fields) {\n    console.log(\"OK!\", rows);\n}).catch(TimeoutError, function(error) {\n    console.log(\"Handle timeout here\");\n}).catch(OpenCircuitError, function(error) {\n    console.log(\"Handle open circuit error here\");\n}).catch(function(error) {\n    console.log(\"Handle any error here\");\n}).finally(function() {\n    cb.stopEvents();\n    pool.end();\n});\n\n```\n#Request Circuit Breaker Quick Start\n```javascript\nvar CircuitBreaker = require('promise-circuitbreaker'),\n    RequestCircuitBreaker = CircuitBreaker.RequestCircuitBreaker,\n    TimeoutError = CircuitBreaker.TimeoutError,\n    OpenCircuitError = CircuitBreaker.OpenCircuitError;\n\nvar isError = function(error, response, body) {\n    if (error) return error;\n    if (response.statusCode == 503) {\n        var unavailableError = new Error();\n        unavailableError.name = \"ServiceUnavailableError\";\n        return unavailableError;\n    }\n    return null;\n};\n\nvar cb = new RequestCircuitBreaker({\n    isErrorHandler: isError,\n    errorThreshold: 0.1, // allow 10% error rate\n    errorNamesThresholds: {\n        ServiceUnavailableError: 0 // but close circuit on first unavailable error\n    }\n});\n\ncb.exec({url: 'https://graph.facebook.com/19292868552', json: true})\n.spread(function(response, page) {\n    console.log(page);\n}).catch(TimeoutError, function(error) {\n    console.log(\"Timeout!\", error);\n}).catch(OpenCircuitError, function(error) {\n    console.log(\"Circuit is open!\");\n}).catch(function(error) {\n    console.log(\"Other error\");\n}).finally(function() {\n    cb.stopEvents();\n});\n```\n\n#Health Window\nThe circuit breaker monitors the health using a rolling window.  The\ntotal period of time is determined by the number of windows and the\nsize of each window.  This is the same as the \"buckets\" in\n[Netflix's Circuit Breaker](https://github.com/Netflix/Hystrix/wiki/How-it-Works#CircuitBreaker)\nThe defaults are the same as in Netflix's implementation (10 intervals of 1 second each).\n\n#Concurrency\nThe circuit breaker keeps a count of the current \"active\" calls.\nThese are calls which have begun but whose callback has not yet been called\n*and* which have not yet timedout.\nDisabled by default, you can configure the circuit breaker to queue requests once\nthe active counter reaches a certain level.\nThis might help you protect your backend by limiting the simultaneous calls made\nto it.  There are, however, some things to keep in mind.\n\nFirst of all, the wrapped resource might have it's own control. This is the case if you are using a\nmysql pool of connections, for example. The [request](https://github.com/mikeal/request) module uses\npooling which defaults to node's global [http.agent.maxSockets](http://nodejs.org/api/http.html#http_agent_maxsockets).\nSo if you are using the RequestCircuitBreaker, even if you do not restrict the concurrency\nat the circuit breaker's level, you might notice that there are never more than 5 active connections (per host)\nwhich is node's default.\n\nYou might want to use the circuit breaker's concurrency throttling to alter this behaviour. Consider a RESTful API,\nyou could set node's (or the request module) pooling to 100 but have different circuit breakers\nwith different concurrency settings for different resources.\n\nHowever, please notice that the current implementation *does not care* how much time a call remains\nin the queue. The timeout control starts once the call is actually executed.  So, the end-user could end waiting\na more than expected even if the call succeeds very quickly, because it might have spent some time\nin the queue.\n\n#Example App\nIf you download the project you can run a more complete example.\nFor more information please read its\n[readme](https://github.com/pablolb/promise-circuitbreaker/tree/master/example/app/).\n\n#Configuration\nThere are several parameters which allow you to configure the circuit breaker's\nbehaviour, allowing you to adjust it to your particular needs.\nPlease look at the [docs](http://pablolb.github.io/promise-circuitbreaker/CircuitBreaker.html)\nfor more details.\n\n##Volume Threshold\nThe minimum amount of total calls in the health window required to start\ncalculating the circuit's health. The circuit remains *closed* until this level is reached.\nYou can set it to zero to always calculate the circuit's health. With a positive errorThreshold,\nthis means that if the first request is an error, the circuit will trip.\n\n##Timeout\nThe maximum amount of time the circuit breaker waits for the callback before failing\nwith a TimeoutError. You can set it to zero to disable this functionality. The circuit breaker\nwill only trip on errors.\n\n##Error Threshold\nThe ratio of errors in the current health window which trips (opens) the circuit.\nThe value is expressed as a float between 0 and 1. Setting it two 0 trips the circuit\non the first error. Setting it to one, forces the circuit to always remain closed.\nYou can also set a lower error rate for particular errors.\n\n#Running the tests\nYou can run the tests with `make test`.  The main test is written with\n[yadda](https://github.com/acuminous/yadda) and run through mocha.\n\n#License\nThe MIT License (MIT)\n\nCopyright (c) 2014 Pablo de León Belloc\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "promise-circuitbreaker@1.0.2",
  "_from": "promise-circuitbreaker@~1.0.2"
}
